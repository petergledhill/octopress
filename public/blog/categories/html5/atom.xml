<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HTML5 | Peter Gledhill, Freelance Developer]]></title>
  <link href="http://www.peteg.eu/blog/categories/html5/atom.xml" rel="self"/>
  <link href="http://www.peteg.eu/"/>
  <updated>2013-11-27T14:20:38+00:00</updated>
  <id>http://www.peteg.eu/</id>
  <author>
    <name><![CDATA[Peter Gledhill]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basics of multiplayer : local movement]]></title>
    <link href="http://www.peteg.eu/blog/2013/11/27/basics-of-multiplayer-in-nodejs-your-movement/"/>
    <updated>2013-11-27T13:03:58+00:00</updated>
    <id>http://www.peteg.eu/blog/2013/11/27/basics-of-multiplayer-in-nodejs-your-movement</id>
    <content type="html"><![CDATA[<p>When playing a multiplayer game you generally give instructions to your avatar through some input device and see the results immediately on screen, we&rsquo;ll call that &lsquo;local movement&rsquo;.  You can also see the movement of other players avatars, we&rsquo;ll call that &lsquo;remote movement&rsquo;. These two types of movement (local and remote) are modelled very differently.  This article focuses on &lsquo;local movement&rsquo;.</p>

<h2>The Basic idea</h2>

<h3>On the client</h3>

<ol>
<li>On the update loop &ndash; your keypresses are captured and recorded as a &lsquo;move&rsquo;.</li>
<li>The result of the move is calculated and the position of your avatar is updated.</li>
<li>The move is stored along with the time it was created.</li>
<li>The move is sent to the server along with the result of the move.</li>
</ol>


<h3>On the server</h3>

<ol>
<li>The server received the move and immediately calculates the result of the move on the player.</li>
<li>The result is checked against the result which was sent by the client.

<ol>
<li>If the results match then the server sends a message to the client to say the result was good.</li>
<li>If the server disagrees about the result then it informs the client of what the result should have been.</li>
</ol>
</li>
</ol>


<h3>Back on the client</h3>

<p>Note: While the server was calculating the result, the client will have generated new moves and which it will have sent to the server.</p>

<ol>
<li>If a good move is acknowledged then no action is required.</li>
<li>If a move is corrected then update the position based on the result from the server.  Any moves which have occurred since this corrected move must be calculated again.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First steps into real time multiplayer with node.js]]></title>
    <link href="http://www.peteg.eu/blog/2013/05/13/first-steps-into-real-time-multiplayer-with-node-dot-js/"/>
    <updated>2013-05-13T15:01:00+01:00</updated>
    <id>http://www.peteg.eu/blog/2013/05/13/first-steps-into-real-time-multiplayer-with-node-dot-js</id>
    <content type="html"><![CDATA[<h2>Tl;Dr</h2>

<p>In my spare time I&rsquo;ve been playing around with node.js and websockets to learn more about how multiplayer games work.  This is still work in progress and very basic but for anyone interested it&rsquo;s at <a href="https://github.com/petergledhill/basic-realtime-multiplayer">https://github.com/petergledhill/basic-realtime-multiplayer</a>.</p>

<h2>Story mode</h2>

<p>I&rsquo;ve been wanting to write some serious javascript and am interested in how multiplayer games work.</p>

<p>I was aware that they operate under an authoritative server model; the server is responsible for recording state of the game and then broadcasts it to the clients (this helps to prevent cheating).  However I had no idea how to implement this in practice.</p>

<p>I came across this <a href="http://buildnewgames.com/real-time-multiplayer/">article by Sven Bergstr√∂m</a> which was very helpful in explaining how it all works. It even comes with source code written in Javascript for node.js and the browser.</p>

<p>Looking at the source I decided I wasn&rsquo;t going to get my head around the intricacies by hacking at it.  So I decided to have a go at writing something similar from scratch.</p>

<p>The aim is to show the principles of multiplayer gaming through code, it&rsquo;s not a game itself but I hope to fully document the code and write a proper post about what I&rsquo;ve learned in the near future.</p>
]]></content>
  </entry>
  
</feed>
